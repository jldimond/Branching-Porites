resid_all_binary <- ifelse(resid_all<=-1, 1, 0)
View(resid_all_binary)
resid_t_binary <- t(resid_all_binary)
d <- dist(resid_t_binary) # euclidean distances between the rows
fit <- cmdscale(d,eig=TRUE, k=2)
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y)
text(x, y, labels = row.names(resid_t_binary), cex=.7)
#plot normalized counts
par(mfrow = c(7, 4))
par(mar = c(2,2,2,2))
par(oma = c(2,2,1,1))
plot(counts2_cpm[,1], counts2_cpm[,2])
plot(counts2_cpm[,3], counts2_cpm[,4])
plot(counts2_cpm[,5], counts2_cpm[,6])
plot(counts2_cpm[,7], counts2_cpm[,8])
plot(counts2_cpm[,9], counts2_cpm[,10])
plot(counts2_cpm[,11], counts2_cpm[,12])
plot(counts2_cpm[,13], counts2_cpm[,14])
plot(counts2_cpm[,15], counts2_cpm[,16])
plot(counts2_cpm[,17], counts2_cpm[,18])
plot(counts2_cpm[,19], counts2_cpm[,20])
plot(counts2_cpm[,21], counts2_cpm[,22])
plot(counts2_cpm[,23], counts2_cpm[,24])
plot(counts2_cpm[,25], counts2_cpm[,26])
plot(counts2_cpm[,27], counts2_cpm[,28])
plot(counts2_cpm[,29], counts2_cpm[,30])
plot(counts2_cpm[,31], counts2_cpm[,32])
plot(counts2_cpm[,33], counts2_cpm[,34])
plot(counts2_cpm[,35], counts2_cpm[,36])
plot(counts2_cpm[,37], counts2_cpm[,38])
plot(counts2_cpm[,39], counts2_cpm[,40])
plot(counts2_cpm[,41], counts2_cpm[,42])
plot(counts2_cpm[,43], counts2_cpm[,44])
plot(counts2_cpm[,45], counts2_cpm[,46])
plot(counts2_cpm[,47], counts2_cpm[,48])
plot(counts2_cpm[,49], counts2_cpm[,50])
plot(counts2_cpm[,51], counts2_cpm[,52])
plot(resid103)
plot(resid103)
plot(resid104)
plot(x, y)
text(x, y, labels = row.names(resid_t_binary), cex=.7)
data <- read.delim("~/snpEff/data3-2.txt", header=FALSE)
data2 <- t(sapply(seq(4,ncol(data), by=4), function(i) {
indx <- i:(i+3)
rowSums(data[indx[indx <= ncol(data)]])}))
data3 <- as.data.frame(t(data2))
#Add header names
header <- read.delim("~/snpEff/header_data3.txt", header=FALSE)
names <- as.vector(t(header))
colnames(data3) <- names
#Select samples of interest (some have very low sample sizes)
data4 <- data3[,c(3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,
22,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,
41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56)]
data5 <- data4[apply(data4[c(1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,
31,33,35,37,39,41,43,45,47,49,51)],1,
function(z) !any(z==0)),]
library("edgeR")
#read in the file to edgeR
counts <- DGEList(counts=data5)
counts$samples
#TMM normalization (corrects for library size)
counts2 <- calcNormFactors(counts)
counts2$samples
#extract normalized counts
counts2_cpm <- cpm(counts2, normalized.lib.sizes=TRUE, log=TRUE)
View(counts2_cpm)
princomp(counts2_cpm)
pca_normCounts <- princomp(counts2_cpm)
data6 <- data5[,c(2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
38,40,42,44,46,48,50,52)]
counts <- DGEList(counts=data6)
counts$samples
#TMM normalization (corrects for library size)
counts2 <- calcNormFactors(counts)
counts2$samples
#extract normalized counts
counts2_cpm <- cpm(counts2, normalized.lib.sizes=TRUE, log=TRUE)
pca_normCounts <- princomp(counts2_cpm)
plot(pca_normCounts)
summary(counts2_cpm)
biplot(counts2_cpm)
biplot(prcomp(counts2_cpm, scale = TRUE))
summary(pca_normCounts)
biplot(pca_normCounts)
lm103 <- lm(counts2_cpm[,2] ~ counts2_cpm[,1])
lm104 <- lm(counts2_cpm[,4] ~ counts2_cpm[,3])
lm105 <- lm(counts2_cpm[,6] ~ counts2_cpm[,5])
lm106 <- lm(counts2_cpm[,8] ~ counts2_cpm[,7])
lm107 <- lm(counts2_cpm[,10] ~ counts2_cpm[,9])
lm108 <- lm(counts2_cpm[,12] ~ counts2_cpm[,11])
lm109 <- lm(counts2_cpm[,14] ~ counts2_cpm[,13])
lm110 <- lm(counts2_cpm[,16] ~ counts2_cpm[,15])
lm111 <- lm(counts2_cpm[,18] ~ counts2_cpm[,17])
lm112 <- lm(counts2_cpm[,20] ~ counts2_cpm[,19])
lm114 <- lm(counts2_cpm[,22] ~ counts2_cpm[,21])
lm115 <- lm(counts2_cpm[,24] ~ counts2_cpm[,23])
lm116 <- lm(counts2_cpm[,26] ~ counts2_cpm[,25])
lm117 <- lm(counts2_cpm[,28] ~ counts2_cpm[,27])
lm118 <- lm(counts2_cpm[,30] ~ counts2_cpm[,29])
lm121 <- lm(counts2_cpm[,32] ~ counts2_cpm[,31])
lm122 <- lm(counts2_cpm[,34] ~ counts2_cpm[,33])
lm123 <- lm(counts2_cpm[,36] ~ counts2_cpm[,35])
lm124 <- lm(counts2_cpm[,38] ~ counts2_cpm[,37])
lm125 <- lm(counts2_cpm[,40] ~ counts2_cpm[,39])
lm126 <- lm(counts2_cpm[,42] ~ counts2_cpm[,41])
lm127 <- lm(counts2_cpm[,44] ~ counts2_cpm[,43])
lm128 <- lm(counts2_cpm[,46] ~ counts2_cpm[,45])
lm129 <- lm(counts2_cpm[,48] ~ counts2_cpm[,47])
lm130 <- lm(counts2_cpm[,50] ~ counts2_cpm[,49])
lm131 <- lm(counts2_cpm[,52] ~ counts2_cpm[,51])
resid103 <- residuals(lm103)
resid104 <- residuals(lm104)
resid105 <- residuals(lm105)
resid106 <- residuals(lm106)
resid107 <- residuals(lm107)
resid108 <- residuals(lm108)
resid109 <- residuals(lm109)
resid110 <- residuals(lm110)
resid111 <- residuals(lm111)
resid112 <- residuals(lm112)
resid114 <- residuals(lm114)
resid115 <- residuals(lm115)
resid116 <- residuals(lm116)
resid117 <- residuals(lm117)
resid118 <- residuals(lm118)
resid121 <- residuals(lm121)
resid122 <- residuals(lm122)
resid123 <- residuals(lm123)
resid124 <- residuals(lm124)
resid125 <- residuals(lm125)
resid126 <- residuals(lm126)
resid127 <- residuals(lm127)
resid128 <- residuals(lm128)
resid129 <- residuals(lm129)
resid130 <- residuals(lm130)
resid131 <- residuals(lm131)
resid_all <- cbind(resid103, resid104, resid105, resid106, resid107, resid108,
resid109, resid110, resid111, resid112, resid114, resid115,
resid116, resid117, resid118, resid121, resid122, resid123,
resid124, resid125, resid126, resid127, resid128, resid129,
resid130, resid131)
library("edgeR")
#read in the file to edgeR
counts <- DGEList(counts=data5)
counts$samples
#TMM normalization (corrects for library size)
counts2 <- calcNormFactors(counts)
counts2$samples
#extract normalized counts
counts2_cpm <- cpm(counts2, normalized.lib.sizes=TRUE, log=T
gy
counts2_cpm <- cpm(counts2, normalized.lib.sizes=TRUE, log=TRUE)
lm103 <- lm(counts2_cpm[,2] ~ counts2_cpm[,1])
lm104 <- lm(counts2_cpm[,4] ~ counts2_cpm[,3])
lm105 <- lm(counts2_cpm[,6] ~ counts2_cpm[,5])
lm106 <- lm(counts2_cpm[,8] ~ counts2_cpm[,7])
lm107 <- lm(counts2_cpm[,10] ~ counts2_cpm[,9])
lm108 <- lm(counts2_cpm[,12] ~ counts2_cpm[,11])
lm109 <- lm(counts2_cpm[,14] ~ counts2_cpm[,13])
lm110 <- lm(counts2_cpm[,16] ~ counts2_cpm[,15])
lm111 <- lm(counts2_cpm[,18] ~ counts2_cpm[,17])
lm112 <- lm(counts2_cpm[,20] ~ counts2_cpm[,19])
lm114 <- lm(counts2_cpm[,22] ~ counts2_cpm[,21])
lm115 <- lm(counts2_cpm[,24] ~ counts2_cpm[,23])
lm116 <- lm(counts2_cpm[,26] ~ counts2_cpm[,25])
lm117 <- lm(counts2_cpm[,28] ~ counts2_cpm[,27])
lm118 <- lm(counts2_cpm[,30] ~ counts2_cpm[,29])
lm121 <- lm(counts2_cpm[,32] ~ counts2_cpm[,31])
lm122 <- lm(counts2_cpm[,34] ~ counts2_cpm[,33])
lm123 <- lm(counts2_cpm[,36] ~ counts2_cpm[,35])
lm124 <- lm(counts2_cpm[,38] ~ counts2_cpm[,37])
lm125 <- lm(counts2_cpm[,40] ~ counts2_cpm[,39])
lm126 <- lm(counts2_cpm[,42] ~ counts2_cpm[,41])
lm127 <- lm(counts2_cpm[,44] ~ counts2_cpm[,43])
lm128 <- lm(counts2_cpm[,46] ~ counts2_cpm[,45])
lm129 <- lm(counts2_cpm[,48] ~ counts2_cpm[,47])
lm130 <- lm(counts2_cpm[,50] ~ counts2_cpm[,49])
lm131 <- lm(counts2_cpm[,52] ~ counts2_cpm[,51])
resid103 <- residuals(lm103)
resid104 <- residuals(lm104)
resid105 <- residuals(lm105)
resid106 <- residuals(lm106)
resid107 <- residuals(lm107)
resid108 <- residuals(lm108)
resid109 <- residuals(lm109)
resid110 <- residuals(lm110)
resid111 <- residuals(lm111)
resid112 <- residuals(lm112)
resid114 <- residuals(lm114)
resid115 <- residuals(lm115)
resid116 <- residuals(lm116)
resid117 <- residuals(lm117)
resid118 <- residuals(lm118)
resid121 <- residuals(lm121)
resid122 <- residuals(lm122)
resid123 <- residuals(lm123)
resid124 <- residuals(lm124)
resid125 <- residuals(lm125)
resid126 <- residuals(lm126)
resid127 <- residuals(lm127)
resid128 <- residuals(lm128)
resid129 <- residuals(lm129)
resid130 <- residuals(lm130)
resid131 <- residuals(lm131)
resid_all <- cbind(resid103, resid104, resid105, resid106, resid107, resid108,
resid109, resid110, resid111, resid112, resid114, resid115,
resid116, resid117, resid118, resid121, resid122, resid123,
resid124, resid125, resid126, resid127, resid128, resid129,
resid130, resid131)
#plot residuals
pca <- princomp(resid_all)
biplot(pca)
resid_all <- cbind(resid103, resid104, resid105, resid106, resid107, resid108,
resid109, resid110, resid111, resid114, resid115,
resid116, resid117, resid118, resid121, resid122, resid123,
resid124, resid125, resid126, resid127, resid128, resid129,
resid130, resid131)
pca <- princomp(resid_all)
biplot(pca)
pca$Comp.2
View(resid_all)
resid_t <- t(resid_all)
pca <- princomp(resid_t)
data <- read.delim("~/snpEff/data3-2.txt", header=FALSE)
# Since the base counts were split into four columns, these need
# to be summed
data2 <- t(sapply(seq(4,ncol(data), by=4), function(i) {
indx <- i:(i+3)
rowSums(data[indx[indx <= ncol(data)]])}))
#The resulting file needs to be transposed and turned into a dataframe
data3 <- as.data.frame(t(data2))
#Add header names
header <- read.delim("~/snpEff/header_data3.txt", header=FALSE)
names <- as.vector(t(header))
colnames(data3) <- names
#Select samples of interest (some have very low sample sizes)
data4 <- data3[,c(3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,
22,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,
41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56)]
data5 <- data4[apply(data4[c(1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,
31,33,35,37,39,41,43,45,47,49,51)],1,
function(z) !any(z==0)),]
data6 <- data5[,c(2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
38,40,42,44,46,48,50,52)]
counts <- DGEList(counts=data6)
counts$samples
#TMM normalization (corrects for library size)
counts2 <- calcNormFactors(counts)
counts2$samples
plotMDS(counts2)
counts2 <- equalizeLibSizes(counts)
counts2$samples
summary(counts2$pseudo.counts)
?cpm
update.package("htmltools")
update.packages("htmltools", repos = "https://github.com/rstudio/htmltools")
install.packages("~/Downloads/htmltools_0.3.5.tar.gz", repos = NULL, type = "source")
############################################################################
## This script analyzes ddRADseq and EpiRADseq data in branching Porites spp.
#Set directory
setwd("~/Documents/Projects/PoritesRADseq/Branching-Porites/analyses/ipyrad_analysis/data3_outfiles")
## First we read in a .str file from the ipyrad output and subset the
## data to get only ddRAD data and extract only SNPs without missing data.
# Read in data file
ustr <- read.delim("data3.u.str", header=FALSE)
ddata <- ustr[,colSums(is.na(ustr))<nrow(ustr)]
#Vector of  unlinkedSNP IDs corresponding to data3.snps.map
unlinkedsnps <- read.delim("loc_id4.txt", header=FALSE)
unlinkedsnps2 <- t(unlinkedsnps)
ddata2 <- ddata[,2:11823]
colnames(ddata2) <- unlinkedsnps2
ddata3 <- cbind(ddata[,1],ddata2)
ddata4 <- t(ddata3)
ddata5 <- as.data.frame(ddata4)
#Extract only ddRAD data
ddata6 <- ddata5[,c(1,2,5,6,9,10,13,14,17,18,21,22,25,26,29,30,33,34,37,38,41,
42,47,48,51,52,55,56,59,60,63,64,69,70,73,74,77,78,81,82,85,86,
89,90,93,94,97,98,101,102,105,106,109,110)]
#Remove any SNPs with missing data (-9 is the NA value)
ddata7 <- ddata6[!rowSums(ddata6 == -9) >= 1,]
ddata8 <-t(ddata7)
rownames(ddata8) <- ddata8[,1]
ddata9 <- ddata8[,2:1114]
write.table(ddata9, file = "data3-2.str", row.names = TRUE, col.names = TRUE, quote = FALSE)
## Next we read in a .geno file from the ipyrad output and extract
## ddRAD data without missing values. This is the best filetype for MDS.
geno1 <- read.table("data3.u.geno", colClasses = 'character', header = FALSE)
geno2 <- read.fwf("data3.u.geno", widths=rep(1, max(nchar(geno1$V1))), colClasses = 'numeric', header=FALSE)
header <- read.delim("header_data3.txt", header=FALSE)
names <- t(header)
names2 <-as.vector(names)
colnames(geno2) <- names2
#Select samples of interest (some have very low sample sizes)
geno3 <- geno2[,c(1,3:22,24:33,35:56)]
#Matrix with only ddr loci **if including sample 101
geno4 <- geno3[,c(1, (seq(2, 53, by = 2)))]
#Get rid of rows with any NAs (9)
geno5 <- geno4[!rowSums(geno4 == 9) >= 1,]
#########################################################################
#Matrix with ddr and epi loci for comparison of SNP genotyping error
geno6 <- geno2[,c(3:20,24:33,35:56)]
geno7 <- geno6[!rowSums(geno6 == 9) >= 1,]
geno8 <- t(geno7)
library("ape")
epidd_dist <- dist.gene(geno8, method = "percent", pairwise.deletion = FALSE,
variance = FALSE)
epidd_dist2 <- as.matrix(epidd_dist)
epidd_dist3 <- epidd_dist2[c(seq(from =1, to = nrow(epidd_dist2), by= 2)),
c(seq(from =2, to = ncol(epidd_dist2), by= 2))]
library(reshape2)
melted <- melt(epidd_dist3, na.rm = TRUE)
library(ggplot2)
ggplot(data = melted, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "white", high = "red", limit = c(0,0.35), space = "Lab",
name="SNP Mismatches") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 9.5, hjust = 1))+
labs(x= "EpiRADseq samples", y = "ddRADseq samples")+
coord_fixed()
##############################################################################
## Next we read in a text file derived from the "Base Counts"
## .vcf output from ipyrad. Base counts are used for analysis of
## EpiRADseq data.
#Read in data file. The file "data3-2.txt" was generated from the notebook "VCF_readcounts.ipynb"
Epidata <- read.delim("data3-2.txt", header=FALSE)
#Since the base counts were split into four columns for each base, these need
#to be summed
Epidata2 <- t(sapply(seq(4,ncol(Epidata), by=4), function(i) {
indx <- i:(i+3)
rowSums(Epidata[indx[indx <= ncol(Epidata)]])}))
#The resulting file needs to be transposed and turned into a dataframe
Epidata3 <- as.data.frame(t(Epidata2))
#Add column with locus number (CHROM from .vcf file)
locus <- Epidata[,1]
row.names(Epidata3) <- locus
#Add header names
header <- read.delim("header_data3.txt", header=FALSE)
names <- as.vector(t(header))
colnames(Epidata3) <- names
#Select samples of interest (some have very low sample sizes)
Epidata4 <- Epidata3[,c(3:20,24:33,35:56)]
#Remove ddr rows that have any zeros. The premise here is that zeros
#in the EpiRAD dataset are informative because they may reflect
#methylation, but they could also relfect true absence of the locus
#in the library. Here the ddRAD library serves to standarize the EpiRAD
#library. Any zeros in the ddRAD libary are treated as absence of the
#locus, thereby leaving zeros in the EpiRAD library only where the
#locus was counted in the ddRAD library.
Epidata5 <- Epidata4[apply(Epidata4[c(seq(1, 50, by = 2))],1,
function(z) !any(z<=10)),] #increased from z==0
#################################################################
# Now use edgeR package to standardize EpiRAD count data by library size
library("edgeR")
#read in the file to edgeR
counts <- DGEList(counts=Epidata5)
counts$samples
#TMM normalization (corrects for library size)
counts2 <- calcNormFactors(counts)
counts2$samples
#extract normalized counts
counts2_cpm <- cpm(counts2, normalized.lib.sizes=TRUE, log=TRUE)
##Plots to show ddRAD vs EpiRAD library (before normalization)
par(mfrow = c(5, 5))
par(mar = c(2, 2 ,2 ,2), oma = c(4, 4, 0.5, 0.5))
for (i in seq(1,49, by = 2)){
plot(Epidata5[,i], Epidata5[,i+1], main = colnames(Epidata5[i]), col = "blue")
}
#plot normalized counts
par(mfrow = c(5, 5))
par(mar = c(2, 2, 2, 2), oma = c(4, 4, 0.5, 0.5))
for (i in seq(1,49, by = 2)){
plot(counts2_cpm[,i], counts2_cpm[,i+1], main = colnames(counts2_cpm[i]), col = "blue")
}
##################################################################
#Using lm to get residuals
models <- list()
for (i in seq(1,49, by = 2)){
models[[colnames(counts2_cpm)[i]]] <- lm(counts2_cpm[,i+1] ~ counts2_cpm[,i])
}
residuals <- lapply(models, '[[', 2)
resid_all <- as.data.frame(residuals)
#plot residuals
par(mfrow = c(5, 5))
par(mar = c(2,2, 2, 2), oma = c(4, 4, 0.5, 0.5))
for (i in 1:25){
plot(resid_all[,i], col = "blue", ylim = c(-10, 4))
abline(h = -1)
}
dev.off()
#Plot to compare raw data to residuals
par(mfrow = c(3, 1))
par(mar = c(4, 4.5, 2, 1), oma = c(1, 1, 0, 0))
plot(Epidata5[,13], Epidata5[,14], xlab = "ddRAD read counts", ylab = "EpiRAD read counts",
col = "blue", cex.axis = 1.1, cex.lab = 1.2, yaxp = c(0, 300, 3))
plot(counts2_cpm[,13], counts2_cpm[,14], xlab = "ddRAD read counts", ylab = "EpiRAD read counts",
col = "blue", cex.axis = 1.1, cex.lab = 1.2)
abline(models$`109_ddr`)
plot(resid_all[,7], ylab = "Residual", col = "blue", cex.axis = 1.1, cex.lab = 1.2)
abline(h = -1, lty = "dotted")
mtext('A', side=3, line=-1.6, at = 0.15, outer=TRUE)
mtext('B', side=3, line=-20, at = 0.15, outer=TRUE)
mtext('C', side=3, line=-39, at = 0.15, outer=TRUE)
dev.off()
#################################################################
#Make binary dataset of EpiRAD data based on residuals <=-1
#All methylated loci converted to 1, nonmethylated to zero
resid_all_binary <- ifelse(resid_all<=-1, 1, 0)
#proportion of methylated cutsites
prop_methyl <- colSums(resid_all_binary) / nrow(resid_all_binary)
dens <- density(prop_methyl)
plot(dens, xlab = "Methylation", ylab = "Density", main = "")
mean(prop_methyl)
sd(prop_methyl)
#Get only rows that are differentially methylated
resid1 <- resid_all_binary[rowSums(resid_all_binary) < 25, ]
resid2 <- resid1[rowSums(resid1) >= 1, ]
########################################################
#Read in sample info (sample #, depth, symbiont type, habitat, diameter)
sinfo <- read.table("sample_info.txt", colClasses = 'character', header = TRUE)
#transpose
tsinfo <- t(sinfo)
#create vectors for diameter (note whether sample 101
#was included or not)
diam <- as.numeric(tsinfo[5,])
###########################################################################
#MDS of ddRAD - SNP data
SNPs <- t(geno5)
# euclidean distances between the rows
ddist <- dist(SNPs)
ddfit <- cmdscale(ddist,eig=TRUE, k=2)
ddx <- ddfit$points[,1]
ddy <- ddfit$points[,2]
plot(ddx, ddy, xlab="Coordinate 1", ylab="Coordinate 2", col = "blue")
####################################################################
#DAPC (discriminant analysis of principal components) of SNPs using adegenet
library("adegenet")
library("ade4")
#Read in unlinked SNP file created at the top of this script.
#Note: must manually delete 1st entry in 1st row of "data3-2.str"
genind1 <- read.structure("data3-2.str", n.ind = 27, n.loc = 1113,
onerowperind = FALSE, col.lab = 1,
NA.char = "-9", ask = FALSE,
row.marknames = 1, quiet = FALSE)
#Find optimal number of clusters irrespective of species id
#In this case, best to retain all PCs
groups <- find.clusters(genind1, max.n.clust=10, n.pca = 24,
choose.n.clust = FALSE, criterion = "min")
#Cross validation to determine number of PCs to retain
xval <- xvalDapc(genind1@tab, groups$grp, n.pca.max = 25, training.set = 0.9,
result = "groupMean", center = TRUE, scale = FALSE,
n.pca = NULL, n.rep = 100, xval.plot = TRUE)
dev.off()
#show max number of PCs to retain
xval[2:6]
#perform dapc using groups defined above group (groups$grp). Note
#that n.pca and n.da can be left blank and the program will query
#which values to choose.
dapc1 <- dapc(genind1, pop = groups$grp, n.pca=9, n.da = 2)
scatter(dapc1, posi.da = "bottomleft", scree.pca = TRUE, posi.pca = "bottomright")
#Plot cluster vs. BIC and DAPC together
par(mfrow = c(2, 1))
par(mar = c(6, 4.5, 2, 2), oma = c(1, 1, 1, 1))
plot(groups$Kstat, xlab = "Groups (K)", ylab = "BIC", pch = 16,
xaxp = c(1, 9, 4))
lines(groups$Kstat)
cols <- c("red", "orange", "purple")
scatter(dapc1, #label.inds = list(air = 0.1, pch = 0.5),
posi.da = "bottomleft", scree.pca = TRUE, posi.pca = "bottomright",
cell=0, cstar=0, clab=0, cex=3, solid=.4, bg="white",
leg=TRUE, posi.leg="topleft", col = cols)
#look at loadings of individual loci
set.seed(4)
contrib <- loadingplot(dapc1$var.contr, axis=1,
threshold= quantile(dapc1$var.contr,0.90), lab.jitter=1)
###########################################################
#Fst and basic stats for pops based on find.clusters
library("hierfstat")
pop(genind1) <- groups$grp
#number of individuals per group
summary(groups$grp)
#observed heterozygosity
summary(basic.stats(genind1)$Ho)
#expected heterozygosity
summary(basic.stats(genind1)$Hs)
#inbreeding coefficient
summary(basic.stats(genind1)$Fis)
#pairwise Fst
pairwise.fst(genind1)
#stats for all loci
genind1_df <- genind2hierfstat(genind1,pop=NULL)
SNPstats <- basic.stats(genind1_df,diploid = TRUE)
SNPstats2 <- SNPstats$perloc
hist(SNPstats2$Fst, breaks = 40)
plot(SNPstats2$Fst)
#90th percentile Fst outliers
outliers <- SNPstats2[SNPstats2$Fst >= quantile(SNPstats2$Fst,0.90,na.rm = TRUE),]
groups <- as.vector(groups$grp)
#pairwise Weir and Cockeram's Fst
pairwise.WCfst(genind1_df,diploid=TRUE)
####################################################################
#DAPC (discriminant analysis of principal components) of Epi-loci using adegenet
#This uses the binary methylation file generated above (must be transposed)
resid_t_binary <- t(resid_all_binary)
#Find optimal number of clusters irrespective of species id
#In this case, best to retain all PCs
Epigroups <- find.clusters(resid_t_binary, max.n.clust=10, n.pca = 24,
choose.n.clust = TRUE, criterion = "min")
