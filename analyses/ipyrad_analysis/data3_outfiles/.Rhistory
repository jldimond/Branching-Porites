header <- read.delim("header_data3.txt", header=FALSE)
names <- as.vector(t(header))
colnames(Epidata3) <- names
#Select samples of interest (some have very low sample sizes)
Epidata4 <- Epidata3[,c(3:20,24:56)]
#Remove ddr rows that have any zeros. The premise here is that zeros
#in the EpiRAD dataset are informative because they may reflect
#methylation, but they could also relfect true absence of the locus
#in the library. Here the ddRAD library serves to standarize the EpiRAD
#library. Any zeros in the ddRAD libary are treated as absence of the
#locus, thereby leaving zeros in the EpiRAD library only where the
#locus was counted in the ddRAD library.
Epidata5 <- Epidata4[apply(Epidata4[c(1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,
31,33,35,37,39,41,43,45,47,49)],1,
function(z) !any(z<=10)),] #increased from z==0
#################################################################
# Now use edgeR package to standardize EpiRAD count data by library size
library("edgeR")
#read in the file to edgeR
counts <- DGEList(counts=Epidata5)
counts$samples
#TMM normalization (corrects for library size)
counts2 <- calcNormFactors(counts)
counts2$samples
#extract normalized counts
counts2_cpm <- cpm(counts2, normalized.lib.sizes=TRUE, log=TRUE)
##Plots to show ddRAD vs EpiRAD library (before normalization)
par(mfrow = c(5, 5))
par(mar = c(2, 2 ,2 ,2), oma = c(4, 4, 0.5, 0.5))
for (i in seq(1,49, by = 2)){
plot(Epidata5[,i], Epidata5[,i+1], main = colnames(Epidata5[i]), col = "blue")
}
#plot normalized counts
par(mfrow = c(5, 5))
par(mar = c(2, 2, 2, 2), oma = c(4, 4, 0.5, 0.5))
for (i in seq(1,49, by = 2)){
plot(counts2_cpm[,i], counts2_cpm[,i+1], main = colnames(counts2_cpm[i]), col = "blue")
}
##################################################################
#Using lm to get residuals
models <- list()
for (i in seq(1,49, by = 2)){
models[[colnames(counts2_cpm)[i]]] <- lm(counts2_cpm[,i+1] ~ counts2_cpm[,i])
}
residuals <- lapply(models, '[[', 2)
resid_all <- as.data.frame(residuals)
#plot residuals
par(mfrow = c(5, 5))
par(mar = c(2,2, 2, 2), oma = c(4, 4, 0.5, 0.5))
for (i in 1:25){
plot(resid_all[,i], col = "blue")
}
#Plot to compare raw data to residuals
par(mfrow = c(2, 1))
par(mar = c(4, 4.5, 2, 1), oma = c(1, 1, 0, 0))
plot(Epidata5[,13], Epidata5[,14], xlab = "ddRAD read counts", ylab = "EpiRAD read counts", col = "blue")
plot(resid_all[,7], ylab = "Residual", col = "blue")
mtext('A', side=3, line=-1.6, at = 0.2, outer=TRUE)
mtext('B', side=3, line=-16.8, at = 0.2, outer=TRUE)
#################################################################
#Make binary dataset of EpiRAD data based on residuals <=-1
#All methylated loci converted to 1, nonmethylated to zero
resid_all_binary <- ifelse(resid_all<=-1, 1, 0)
#proportion of methylated cutsites
prop_methyl <- colSums(resid_all_binary) / nrow(resid_all_binary)
barplot(prop_methyl)
dens <- density(prop_methyl)
plot(dens)
mean(prop_methyl)
sd(prop_methyl)
barplot(prop_methyl)
View(resid_all_binary2)
Epidata2 <- t(sapply(seq(4,ncol(Epidata), by=4), function(i) {
indx <- i:(i+3)
rowSums(Epidata[indx[indx <= ncol(Epidata)]])}))
View(Epidata2)
Epidata3 <- as.data.frame(t(Epidata2))
View(Epidata3)
locus <- Epidata[,1]
row.names(Epidata3) <- locus
header <- read.delim("header_data3.txt", header=FALSE)
names <- as.vector(t(header))
colnames(Epidata3) <- names
Epidata4 <- Epidata3[,c(3:20,24:56)]
View(Epidata4)
View(Epidata3)
Epidata4 <- Epidata3[,c(3:22,24:33,35:56)]
View(Epidata4)
Epidata4 <- Epidata3[,c(3:20,24:33,35:56)]
Epidata5 <- Epidata4[apply(Epidata4[c(seq(1, 50, by = 2))],1,
function(z) !any(z<=10)),] #increased from z==0
View(Epidata5)
library("edgeR")
#read in the file to edgeR
counts <- DGEList(counts=Epidata5)
counts$samples
#TMM normalization (corrects for library size)
counts2 <- calcNormFactors(counts)
counts2$samples
#extract normalized counts
counts2_cpm <- cpm(counts2, normalized.lib.sizes=TRUE, log=TRUE)
##Plots to show ddRAD vs EpiRAD library (before normalization)
par(mfrow = c(5, 5))
par(mar = c(2, 2 ,2 ,2), oma = c(4, 4, 0.5, 0.5))
for (i in seq(1,49, by = 2)){
plot(Epidata5[,i], Epidata5[,i+1], main = colnames(Epidata5[i]), col = "blue")
}
#plot normalized counts
par(mfrow = c(5, 5))
par(mar = c(2, 2, 2, 2), oma = c(4, 4, 0.5, 0.5))
for (i in seq(1,49, by = 2)){
plot(counts2_cpm[,i], counts2_cpm[,i+1], main = colnames(counts2_cpm[i]), col = "blue")
}
models <- list()
for (i in seq(1,49, by = 2)){
models[[colnames(counts2_cpm)[i]]] <- lm(counts2_cpm[,i+1] ~ counts2_cpm[,i])
}
residuals <- lapply(models, '[[', 2)
resid_all <- as.data.frame(residuals)
#plot residuals
par(mfrow = c(5, 5))
par(mar = c(2,2, 2, 2), oma = c(4, 4, 0.5, 0.5))
for (i in 1:25){
plot(resid_all[,i], col = "blue")
}
#Plot to compare raw data to residuals
par(mfrow = c(2, 1))
par(mar = c(4, 4.5, 2, 1), oma = c(1, 1, 0, 0))
plot(Epidata5[,13], Epidata5[,14], xlab = "ddRAD read counts", ylab = "EpiRAD read counts", col = "blue")
plot(resid_all[,7], ylab = "Residual", col = "blue")
mtext('A', side=3, line=-1.6, at = 0.2, outer=TRUE)
mtext('B', side=3, line=-16.8, at = 0.2, outer=TRUE)
resid_all_binary <- ifelse(resid_all<=-4, 1, 0)
prop_methyl <- colSums(resid_all_binary) / nrow(resid_all_binary)
barplot(prop_methyl)
dens <- density(prop_methyl)
plot(dens)
mean(prop_methyl)
sd(prop_methyl)
resid2 <- resid_all_binary[rowSums(resid1) >= 1, ]
resid2 <- resid_all_binary[rowSums(resid_all_binary) >= 1, ]
View(resid2)
sinfo <- read.table("sample_info.txt", colClasses = 'character', header = TRUE)
tsinfo <- t(sinfo)
diam <- tsinfo[4,]
geno6 <- t(geno5)
ddist <- dist(geno6) # euclidean distances between the rows
ddfit <- cmdscale(ddist,eig=TRUE, k=2)
ddx <- ddfit$points[,1]
ddy <- ddfit$points[,2]
plot(ddx, ddy, xlab="Coordinate 1", ylab="Coordinate 2", col = "blue")
library("adegenet")
library("ade4")
genind1 <- read.structure("data3-2.str", n.ind = 27, n.loc = 1113,
onerowperind = FALSE, col.lab = 1,
NA.char = "-9", ask = FALSE,
row.marknames = 1, quiet = FALSE)
groups <- find.clusters(genind1, max.n.clust=10, n.pca = 24,
choose.n.clust = FALSE, criterion = "min")
xval <- xvalDapc(genind1@tab, groups$grp, n.pca.max = 25, training.set = 0.9,
result = "groupMean", center = TRUE, scale = FALSE,
n.pca = NULL, n.rep = 100, xval.plot = TRUE)
dev.off()
xval[2:6]
dapc1 <- dapc(genind1, pop = groups$grp, n.pca=9, n.da = 2)
scatter(dapc1, posi.da = "bottomleft", scree.pca = TRUE, posi.pca = "bottomright")
resid_t_binary <- t(resid_all_binary)
epidist <- dist(resid_t_binary) # euclidean distances between the rows
epifit <- cmdscale(epidist,eig=TRUE, k=2)
epix <- epifit$points[,1]
epiy <- epifit$points[,2]
plot(epix, epiy, xlab="Coordinate 1", ylab="Coordinate 2", col = "blue")
resid_t_diff <- t(resid2)
groupvec <- as.character(groups$grp)
SNP_Groups <- groupvec[c(2:10,12:27)]
SNP_Groups <- replace(SNP_Groups, which(SNP_Groups == 1), "red")
SNP_Groups <- replace(SNP_Groups, which(SNP_Groups == 2), "orange")
SNP_Groups <- replace(SNP_Groups, which(SNP_Groups == 3), "purple")
col_pal = colorRampPalette(c('light gray', 'black'))(25+1)
data_seq = seq(min(as.numeric(sinfo[c(2:10,12:27),]$V4)), max(as.numeric(sinfo[c(2:10,12:27),]$V4)), length=25)
sinfo <- read.table("sample_info.txt", colClasses = 'character', header = TRUE)
#transpose
tsinfo <- t(sinfo)
#create vectors for diameter (note whether sample 101
#was included or not)
diam <- tsinfo[4,]
data_seq = seq(min(as.numeric(sinfo[c(2:10,12:27),]$V4)), max(as.numeric(sinfo[c(2:10,12:27),]$V4)), length=25)
col_pal = colorRampPalette(c('light gray', 'black'))(25+1)
data_seq = seq(min(as.numeric(sinfo[c(2:10,12:27),]$V4)), max(as.numeric(sinfo[c(2:10,12:27),]$V4)), length=25)
View(sinfo)
data_seq = seq(min(as.numeric(sinfo[c(2:10,12:27),]$V5)), max(as.numeric(sinfo[c(2:10,12:27),]$V5)), length=25)
heatmap.plus(resid_t_diff, scale = "none", labRow = sinfo$V1, labCol = FALSE,
RowSideColors = myCols, col = c("#6baed6", "#08519c"))
library("heatmap.plus")
heatmap.plus(resid_t_diff, scale = "none", labRow = sinfo$V1, labCol = FALSE,
RowSideColors = myCols, col = c("#6baed6", "#08519c"))
data_seq = seq(min(as.numeric(sinfo[c(2:10,12:27),]$V5)), max(as.numeric(sinfo[c(2:10,12:27),]$V5)), length=25)
Diameter = col_pal[ cut(as.numeric(sinfo[c(2:10,12:27),]$V5), data_seq, include.lowest=T) ]
sinfo[c(2:10,12:27),]$V5
heatmap.plus(resid_t_diff, scale = "none")
myCols = cbind(SNP_Groups)
heatmap.plus(resid_t_diff, scale = "none", RowSideColors = myCols)
myCols = SNP_Groups
library("heatmap.plus")
heatmap.plus(resid_t_diff, scale = "none", RowSideColors = myCols)
heatmap(resid_t_diff, scale = "none", RowSideColors = myCols)
basic.stats(genind1)$Fst
library("hierfstat")
basic.stats(genind1)$Fst
basic.stats(genind1)$Ho
pop(genind1) <- groups$grp
basic.stats(genind1)$Ho
summary(basic.stats(genind1)$Ho)
summary(groups$grp)
summary(basic.stats(genind1)$Ho)
summary(basic.stats(genind1)$Hs)
genind1_df <- genind2hierfstat(genind1,pop=NULL)
groups <- as.vector(groups$grp)
pairwise.WCfst(genind1_df,diploid=TRUE)
basic.stats(genind1_df)$Ho
fstat(genind1)
pop(genind1) <- groups$grp
genind1 <- read.structure("data3-2.str", n.ind = 27, n.loc = 1113,
onerowperind = FALSE, col.lab = 1,
NA.char = "-9", ask = FALSE,
row.marknames = 1, quiet = FALSE)
groups <- find.clusters(genind1, max.n.clust=10, n.pca = 24,
choose.n.clust = FALSE, criterion = "min")
summary(basic.stats(genind1)$Ho)
pop(genind1) <- groups$grp
summary(basic.stats(genind1)$Ho)
basic.stats(genind1_df)$Fst
genind1 <- read.structure("data3-2.str", n.ind = 27, n.loc = 1113,
onerowperind = FALSE, col.lab = 1,
NA.char = "-9", ask = FALSE,
row.marknames = 1, quiet = FALSE)
basic.stats(genind1)$Fst
pop(genind1) <- groups$grp
basic.stats(genind1)$Fst
basic.stats(genind1)$Ho
basic.stats(genind1)$perloc
View(geno5)
View(geno6)
install.packages("devtools")
library("devtools")
source("https://bioconductor.org/biocLite.R")
biocLite("qvalue")
install_github("whitlock/OutFLANK")
source("http://bioconductor.org/biocLite.R")
biocLite("qvalue")
install_github("whitlock/OutFLANK")
library("qvalue")
library("OutFLANK")
geno3 <- geno2[,c(1,3:22,24:33,35:56)]
View(geno3)
geno4 <- geno3[,c(seq(1, 53, by = 2))]
View(geno4)
View(geno2)
View(geno3)
geno4 <- geno3[,c(1, (seq(2, 53, by = 2)))]
View(geno4)
geno5 <- geno4[!rowSums(geno4 == 9) >= 1,]
head(geno5)
geno6 <- geno2[,c(3:20,24:33,35:56)]
SNPs <- t(geno5)
ddist <- dist(SNPs) # euclidean distances between the rows
View(SNPs)
FstDataFrame <- MakeDiploidFSTMat(SNPs)
OF <- OutFLANK(SNPs, NumberOfSamples=27, qthreshold = 0.05,
RightTrimFraction = 0.05)
genotypes <- SNPs[, 1:ncol(SNPs)]
View(genotypes)
ind <- colnames(SNPs) # vector with the name of population
ind <- groups$grp # vector with the name of population
locnames <- colnames(SNPs) # vector with the name of loci
FstDF <- MakeDiploidFSTMat(genotypes, locnames, ind)
OF <- OutFLANK(FstDF, NumberOfSamples=27, qthreshold = 0.05,
RightTrimFraction = 0.05)
View(FstDF)
plot(FstDF$FST, FstDF$FSTNoCorr, xlim = c(-0.01,0.3),
ylim = c(-0.01, 0.3), pch = 20)
abline(0, 1) # Checking the effect of sample size on Fst since FSTCoCorr will be used in the follow
hist(FstDF$FSTNoCorr)
OutFLANKResultsPlotter(OF, withOutliers = TRUE, NoCorr = TRUE, Hmin = 0.1,
binwidth = 0.005, Zoom = FALSE, RightZoomFraction = 0.05,
titletext = NULL)
OutFLANKResultsPlotter(OF, withOutliers = TRUE, NoCorr = TRUE, Hmin = 0.1,
binwidth = 0.01, Zoom = FALSE, RightZoomFraction = 0.05,
titletext = NULL)
OutFLANKResultsPlotter(OF, withOutliers = TRUE, NoCorr = TRUE, Hmin = 0.1,
binwidth = 0.1, Zoom = FALSE, RightZoomFraction = 0.05,
titletext = NULL)
OutFLANKResultsPlotter(OF, withOutliers = TRUE, NoCorr = TRUE, Hmin = 0.1,
binwidth = 0.01, Zoom = FALSE, RightZoomFraction = 0.05,
titletext = NULL)
outliers_OF <- OF$results$LocusName[OF$results$OutlierFlag == TRUE]
print(outliers_OF)
OF <- OutFLANK(FstDF, NumberOfSamples=3, qthreshold = 0.05,
RightTrimFraction = 0.05)
plot(FstDF$FST, FstDF$FSTNoCorr, xlim = c(-0.01,0.3),
ylim = c(-0.01, 0.3), pch = 20)
abline(0, 1) # Checking the effect of sample size on Fst since FSTCoCorr will be used in the follow
hist(FstDF$FSTNoCorr)
OutFLANKResultsPlotter(OF, withOutliers = TRUE, NoCorr = TRUE, Hmin = 0.1,
binwidth = 0.01, Zoom = FALSE, RightZoomFraction = 0.05,
titletext = NULL)
outliers_OF <- OF$results$LocusName[OF$results$OutlierFlag == TRUE]
print(outliers_OF)
OF$numberHighFstOutliers
OF <- OutFLANK(FstDF, NumberOfSamples=3, qthreshold = 0.05,
RightTrimFraction = 0.10)
plot(FstDF$FST, FstDF$FSTNoCorr, xlim = c(-0.01,0.3),
ylim = c(-0.01, 0.3), pch = 20)
abline(0, 1) # Checking the effect of sample size on Fst since FSTCoCorr will be used in the follow
hist(FstDF$FSTNoCorr)
OutFLANKResultsPlotter(OF, withOutliers = TRUE, NoCorr = TRUE, Hmin = 0.1,
binwidth = 0.01, Zoom = FALSE, RightZoomFraction = 0.05,
titletext = NULL)
outliers_OF <- OF$results$LocusName[OF$results$OutlierFlag == TRUE]
locnames <- colnames(SNPs) # vector with the name of loci
print(outliers_OF)
OF$numberHighFstOutliers
OF <- OutFLANK(FstDF, NumberOfSamples=3, qthreshold = 0.05,
RightTrimFraction = 0.20)
plot(FstDF$FST, FstDF$FSTNoCorr, xlim = c(-0.01,0.3),
ylim = c(-0.01, 0.3), pch = 20)
abline(0, 1) # Checking the effect of sample size on Fst since FSTCoCorr will be used in the follow
hist(FstDF$FSTNoCorr)
OutFLANKResultsPlotter(OF, withOutliers = TRUE, NoCorr = TRUE, Hmin = 0.1,
binwidth = 0.01, Zoom = FALSE, RightZoomFraction = 0.05,
titletext = NULL)
outliers_OF <- OF$results$LocusName[OF$results$OutlierFlag == TRUE]
print(outliers_OF)
summary(basic.stats(genind1)$Fis)
basic.stats(genind1)$Fis
basic.stats(genind1)$Ho
fstat(genind1)
genind1_df <- genind2hierfstat(genind1,pop=NULL)
View(genind1_df)
basic.stats(genind1_df,diploid = TRUE)
SNPstats <- basic.stats(genind1_df,diploid = TRUE)
SNPstats
SNPstats$perloc
SNPstats$Fst
SNPstats$Fis
SNPstats2 <- SNPstats$perloc
View(SNPstats2)
hist(SNPstats2$Fst)
hist(SNPstats2$Fis)
hist(SNPstats2$Fst, breaks = 0.01)
hist(SNPstats2$Fst, breaks = 10)
hist(SNPstats2$Fst, breaks = 20)
hist(SNPstats2$Fst, breaks = 30)
hist(SNPstats2$Fst, breaks = 40)
FstDF <- MakeDiploidFSTMat(genotypes, locnames, ind)
OF <- OutFLANK(FstDF, NumberOfSamples=3, qthreshold = 0.05,
RightTrimFraction = 0.20)
OF <- OutFLANK(FstDF, NumberOfSamples=3, qthreshold = 0.05,
RightTrimFraction = 0.10)
plot(FstDF$FST, FstDF$FSTNoCorr, xlim = c(-0.01,0.3),
ylim = c(-0.01, 0.3), pch = 20)
abline(0, 1) # Checking the effect
plot(SNPstats2$Fst)
hist(FstDF$FSTNoCorr)
OutFLANKResultsPlotter(OF, withOutliers = TRUE, NoCorr = TRUE, Hmin = 0.1,
binwidth = 0.01, Zoom = FALSE, RightZoomFraction = 0.05,
titletext = NULL)
OF <- OutFLANK(FstDF, NumberOfSamples=3, qthreshold = 0.05,
RightTrimFraction = 0.40)
OutFLANKResultsPlotter(OF, withOutliers = TRUE, NoCorr = TRUE, Hmin = 0.1,
binwidth = 0.01, Zoom = FALSE, RightZoomFraction = 0.05,
titletext = NULL)
outliers_OF <- OF$results$LocusName[OF$results$OutlierFlag == TRUE]
print(outliers_OF)
outliers <- quantile(SNPstats2$Fst,0.90)
outliers <- quantile(SNPstats2$Fst,0.90, na.rm = TRUE)
outliers <- quantile(SNPstats2$Fst,0.80, na.rm = TRUE)
outliers <- loadingplot(SNPstats2$Fst, axis=1,
threshold= quantile(SNPstats2$Fst,0.90), lab.jitter=1)
outliers <- SNPstats2$Fst(quantile(SNPstats2$Fst,0.90,na.rm = TRUE))
outliers <- SNPstats2$Fst(SNPstats2$Fst == quantile(SNPstats2$Fst,0.90,na.rm = TRUE))
outliers <- SNPstats2$Fst[SNPstats2$Fst == quantile(SNPstats2$Fst,0.90,na.rm = TRUE)]
outliers
outliers <- SNPstats2$Fst[SNPstats2$Fst >= quantile(SNPstats2$Fst,0.90,na.rm = TRUE)]
outliers
outliers <- SNPstats2[SNPstats2$Fst >= quantile(SNPstats2$Fst,0.90,na.rm = TRUE)]
outliers <- SNPstats2[,SNPstats2$Fst >= quantile(SNPstats2$Fst,0.90,na.rm = TRUE)]
outliers <- SNPstats2[SNPstats2$Fst >= quantile(SNPstats2$Fst,0.90,na.rm = TRUE),]
View(outliers)
outliers <- SNPstats2[SNPstats2$Fst >= quantile(SNPstats2$Fst,0.90,na.rm = FALSE),]
outliers <- SNPstats2[SNPstats2$Fst >= quantile(SNPstats2$Fst,0.90,na.rm = TRUE),]
contrib <- loadingplot(dapc1$var.contr, axis=1,
threshold= quantile(dapc1$var.contr,0.90), lab.jitter=1)
cont <- as.matrix(dapc1$var.contr[,1])
loci.names <- gsub("\\..*","",rownames(cont))
loci.1 <- cbind(loci.names, cont)
loci.2 <-  loci.1[!duplicated(loci.1[,1]),]
loci.Epi <- as.matrix(rownames(resid2))
cont <- as.matrix(dapc1$var.contr[,1])
loci.names <- gsub("\\..*","",rownames(cont))
loci.1 <- cbind(loci.names, cont)
loci.2 <-  loci.1[!duplicated(loci.1[,1]),]
View(loci.2)
loci.2 <-  loci.1[!duplicated(loci.1[,1]),]
View(loci.2)
SNPstats3 <- cbind(loci.names, SNPstats2)
View(loci.2)
Fst_loadings <- cbind(loci.2, SNPstats2$Fst)
View(Fst_loadings)
Fst_perloc <- cbind(loci.2$loc.names, SNPstats2$Fst)
Fst_perloc <- cbind(locnames, SNPstats2$Fst)
View(Fst_perloc)
View(loci.2)
Fst_outliers <- SNPstats2[SNPstats2$Fst >= quantile(SNPstats2$Fst,0.90,na.rm = TRUE),]
contrib_outliers <- loci.2[loci.2$V2 >= quantile(loci.2$V2,0.90,na.rm = TRUE),]
loci.2$V2
loci.2[,2]
contrib_outliers <- loci.2[loci.2[,2] >= quantile(loci.2[,2],0.90,na.rm = TRUE),]
loci.2 <-  as.numeric(loci.1[!duplicated(loci.1[,1]),])
loci.2 <-  loci.1[!duplicated(loci.1[,1]),]
DAPC_contrib <- as.numeric(loci.2)
loci.2 <-  loci.1[!duplicated(loci.1[,1]),]
View(loci.2)
DAPC_contrib <- as.matrix(loci.2)
View(DAPC_contrib)
contrib_outliers <- DAPC_contrib$V2[DAPC_contrib$V2 >= quantile(DAPC_contrib$V2,0.90,na.rm = TRUE),]
Fst_outliers <- SNPstats2[SNPstats2$Fst >= quantile(SNPstats2$Fst,0.90,na.rm = TRUE),]
View(Fst_outliers)
contrib_outliers <- DAPC_contrib[DAPC_contrib$V2 >= quantile(DAPC_contrib$V2,0.90,na.rm = TRUE),]
contrib_outliers <- DAPC_contrib[DAPC_contrib[,2] >= quantile(DAPC_contrib[,2],0.90,na.rm = TRUE),]
DAPC_contrib <- as.numeric(loci.2[,2])
DAPC_contrib2 <- cbind(locnames, DAPC_contrib)
View(DAPC_contrib2)
contrib_outliers <- DAPC_contrib2[DAPC_contrib2$DAPC_contrib >= quantile(DAPC_contrib2$DAPC_contrib,0.90,na.rm = TRUE),]
View(Fst_perloc)
Fst_perloc <- cbind(loci.2, SNPstats2$Fst)
View(Fst_perloc)
Fst_outliers <- Fst_perloc[Fst_perloc$V3 >= quantile(Fst_perloc$V3,0.90,na.rm = TRUE),]
Fst_outliers <- SNPstats2[SNPstats2$Fst >= quantile(SNPstats2$Fst,0.90,na.rm = TRUE),]
View(Fst_outliers)
Fst_perloc <- as.data.frame(cbind(locnames, SNPstats2$Fst))
View(Fst_perloc)
Fst_outliers <- Fst_perloc[Fst_perloc$V2 >= quantile(Fst_perloc$V2,0.90,na.rm = TRUE),]
Fst_outliers <- Fst_perloc[Fst_perloc$V2 >= quantile(Fst_perloc$V2,0.90,na.rm = FALSE),]
Fst_outliers <- Fst_perloc[Fst_perloc$V2 >= quantile(Fst_perloc$V2,0.90),]
Fst_perloc <- cbind(locnames, SNPstats2$Fst)
Fst_perloc <- cbind(locnames, SNPstats2$Fst)
Fst_outliers <- Fst_perloc[Fst_perloc$V2 >= quantile(Fst_perloc$V2,0.90,na.rm = TRUE),]
View(Fst_perloc)
Fst_perloc <- as.data.frame(cbind(locnames, SNPstats2$Fst))
View(Fst_perloc)
Fst_perloc$V2
Fst_outliers <- Fst_perloc[Fst_perloc$V2 >= quantile(Fst_perloc$V2,0.90,na.rm = TRUE),]
Fst_perloc <- as.numeric(Fst_perloc$V2)
as.numeric(as.character(Fst_perloc$V2))
Fst_perloc <- as.data.frame(cbind(locnames, SNPstats2$Fst))
as.numeric(as.character(Fst_perloc$V2))
Fst_outliers <- Fst_perloc[Fst_perloc$V2 >= quantile(Fst_perloc$V2,0.90,na.rm = TRUE),]
is.numeric(Fst_perloc$V2)
as.numeric(as.character(Fst_perloc$V2))
is.numeric(Fst_perloc$V2)
as.numeric(Fst_perloc$V2)
is.numeric(Fst_perloc$V2)
Fst_perloc$V2 <- as.numeric(as.character(Fst_perloc$V2))
is.numeric(Fst_perloc$V2)
Fst_outliers <- Fst_perloc[Fst_perloc$V2 >= quantile(Fst_perloc$V2,0.90,na.rm = TRUE),]
View(Fst_outliers)
View(loci.2)
loci.names <- gsub("\\..*","",rownames(cont))
cont <- as.matrix(dapc1$var.contr[,1])
View(cont)
SNPstats <- basic.stats(genind1_df,diploid = TRUE)
SNPstats2 <- SNPstats$perloc
View(SNPstats2)
View(ddata7)
ddata9 <- ddata8[,2:1114]
View(ddata9)
write.table(ddata9, file = "data3-2.str", row.names = TRUE, col.names = TRUE, quote = FALSE)
cont <- as.matrix(dapc1$var.contr[,1])
loci.names <- gsub("\\..*","",rownames(cont))
loci.1 <- cbind(loci.names, cont)
loci.2 <-  loci.1[!duplicated(loci.1[,1]),]
View(loci.2)
Fst_perloc <- as.data.frame(cbind(locnames, SNPstats2$Fst))
View(Fst_perloc)
SNPstats <- basic.stats(genind1_df,diploid = TRUE)
SNPstats2 <- SNPstats$perloc
View(SNPstats2)
Fst_perloc <- as.data.frame(cbind(locnames, SNPstats2$Fst))
Fst_perloc$V2 <- as.numeric(as.character(Fst_perloc$V2))
View(Fst_perloc)
Fst_perloc <- as.data.frame(cbind(loci.names, SNPstats2$Fst))
loci.names <- gsub("\\..*","",rownames(cont))
loci.2 <-  loci.1[!duplicated(loci.1[,1]),]
View(loci.2)
locnames <- loci.2$loci.names
locnames <- loci.2[,1]
Fst_perloc <- as.data.frame(cbind(locnames, SNPstats2$Fst))
View(Fst_perloc)
locnames <- loci.2[,1]
Fst_perloc$V2 <- as.numeric(as.character(Fst_perloc$V2))
Fst_outliers <- Fst_perloc[Fst_perloc$V2 >= quantile(Fst_perloc$V2,0.90,na.rm = TRUE),]
View(Fst_outliers)
View(loci.2)
loci.2$V2 <- as.numeric(as.character(loci.2$V2))
loci.3 <- as.data.frame(loci.2)
loci.3$V2 <- as.numeric(as.character(loci.3$V2))
contrib_outliers <- loci.3[loci.3$V2 >= quantile(loci.3$V2,0.90,na.rm = TRUE),]
View(contrib_outliers)
Fst_contrib <- as.matrix(merge(Fst_outliers,contrib_outliers, by.x = "locnames", by.y = "loci.names"))
View(Fst_contrib)
View(Fst_contrib)
